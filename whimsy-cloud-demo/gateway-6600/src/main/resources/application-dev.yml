server:
  port: 6600

spring:
  cloud:
    nacos:
      server-addr: @nacos.server-addr@
      username: nacos
      password: nacos
      namespace: @nacos.namespase@

      discovery:
        server-addr: @nacos.server-addr@
        group: DEFAULT_GROUP
        namespace: @nacos.namespase@

      config:
        group: DEFAULT_GROUP
        namespace: @nacos.namespase@
        file-extension: yaml
        username: nacos
        password: nacos

    sentinel:
      transport:
        dashboard: 192.168.64.129:8858

      scg:
        order: -2147483648 # 过滤器顺序，默认为 -2147483648 最高优先级
        fallback:
          mode: # fallback 模式，目前有三种：response、redirect、空
          # 专属 response 模式
          response-status: 429 # 响应状态码，默认为 429
          response-body: 你被 block 了... # 响应内容，默认为空
          content-type: application/json # 内容类型，默认为 application/json
          # 专属 redirect 模式
          redirect: http://www.baidu.com

      datasource: #sentinel用nacos作为数据源的配置
        flow-rule: #流控规则管理(这个名称可以自定义)
          nacos: # 告诉sentinel用nacos作为数据源
            groupId: SENTINEL_SETTING
            data-id: ${spring.application.name}_sentinel-flow-config.json #nacos配置中心里执行文件的dataId
            server-addr: ${spring.cloud.nacos.server-addr} #nacos的地址
            username: ${spring.cloud.nacos.username} #nacos的用户名
            password: ${spring.cloud.nacos.password} #nacos的密码
            namespace: ${spring.cloud.nacos.namespace}
            rule-type: flow #指定文件配置的是哪种规则 flow-流控,degrade-熔断,param-flow热点参数,system-系统保护,authority-授权,gw-flow gateway网关流控,gw-api-group
        degrade-rule: #降级规则管理(这个名称可以自定义)
          nacos: # 告诉sentinel用nacos作为数据源
            groupId: SENTINEL_SETTING
            data-id: ${spring.application.name}_sentinel-degrade-config.json #nacos配置中心里执行文件的dataId
            server-addr: ${spring.cloud.nacos.server-addr} #nacos的地址
            username: ${spring.cloud.nacos.username} #nacos的用户名
            password: ${spring.cloud.nacos.password} #nacos的密码
            namespace: ${spring.cloud.nacos.namespace}
            rule-type: degrade #指定文件配置的是哪种规则

  config:
    # 文档: https://sca.aliyun.com/docs/2023/user-guide/nacos/advanced-guide/
    import:
      - nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}?refreshEnabled=true
  security:
    oauth2:
      # 资源服务器配置
      resourceserver:
        jwt:
          # Jwt中claims的iss属性，也就是jwt的签发地址，即认证服务器的根路径
          # 资源服务器会进一步的配置，通过该地址获取公钥以解析jwt
          issuer-uri: http://127.0.0.1:6200
      client:
        provider:
          # 认证提供者,自定义名称
          custom-issuer:
            # Token签发地址(认证服务地址)
            issuer-uri: http://127.0.0.1:6200
            # 获取用户信息的地址，为避免麻烦自定一个用户信息接口
  #          user-info-uri: ${spring.security.oauth2.client.provider.custom-issuer.issuer-uri}/user
            user-name-attribute: sub
        registration:
          messaging-client-oidc:
            # oauth认证提供者配置，和上边配置的认证提供者关联起来
            provider: custom-issuer
            # 客户端名称，自定义
            client-name: gateway
            # 客户端id，从认证服务申请的客户端id
            client-id: messaging-client
            # 客户端秘钥
            client-secret: 123456
            # 客户端认证方式
            client-authentication-method: client_secret_post
            # 获取Token使用的授权流程
            authorization-grant-type: authorization_code
            # 回调地址
            redirect-uri: http://127.0.0.1:6600/login/oauth2/code/messaging-client-oidc
            scope:
              - message.read
              - message.write
              - openid
              - profile
    custom:
      ignore-url:
        - /resource/message/delete

feign:
  sentinel:
    enabled: true

logging:
  level:
    root: info
    org.springframework.web: info
    org.springframework.cloud.gateway: trace
    org.springframework.security: trace
    org.springframework.security.oauth2: trace
